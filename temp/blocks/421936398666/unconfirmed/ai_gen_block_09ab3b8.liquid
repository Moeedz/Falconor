{% doc %}
  @prompt
    Create a responsive scrolling section that has different functionality on desktop versus mobile devices. On desktop, it should have smooth horizontal scrolling with navigation arrows or dots. On mobile, it should have touch-friendly vertical scrolling or swipe gestures. Include customizable content areas and ensure the section adapts seamlessly between the two layouts with appropriate CSS media queries.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-scroll-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    padding: {{ block.settings.padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-scroll-wrapper-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-scroll-track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
  }

  .ai-scroll-item-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: calc(100% / {{ block.settings.items_per_row }});
    padding: 0 {{ block.settings.item_spacing }}px;
    box-sizing: border-box;
  }

  .ai-scroll-item-content-{{ ai_gen_id }} {
    background-color: {{ block.settings.item_background_color }};
    border-radius: {{ block.settings.item_border_radius }}px;
    padding: {{ block.settings.item_padding }}px;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .ai-scroll-item-image-{{ ai_gen_id }} {
    width: 100%;
    margin-bottom: 15px;
    border-radius: {{ block.settings.item_border_radius }}px;
    overflow: hidden;
  }

  .ai-scroll-item-image-container-{{ ai_gen_id }} {
    width: 100%;
    padding-bottom: 75%;
    position: relative;
    overflow: hidden;
    border-radius: {{ block.settings.item_border_radius }}px;
  }

  .ai-scroll-item-image-container-{{ ai_gen_id }} img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-scroll-item-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .ai-scroll-item-image-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
  }

  .ai-scroll-item-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    margin-bottom: 10px;
    color: {{ block.settings.title_color }};
  }

  .ai-scroll-item-text-{{ ai_gen_id }} {
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
  }

  .ai-scroll-nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }

  .ai-scroll-dot-{{ ai_gen_id }} {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.3;
    margin: 0 5px;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }

  .ai-scroll-dot-{{ ai_gen_id }}.active {
    opacity: 1;
  }

  .ai-scroll-arrow-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: {{ block.settings.arrow_background_color }};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
  }

  .ai-scroll-arrow-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.arrow_hover_color }};
  }

  .ai-scroll-arrow-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    fill: none;
    stroke: {{ block.settings.arrow_color }};
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
  }

  .ai-scroll-prev-{{ ai_gen_id }} {
    left: 10px;
  }

  .ai-scroll-next-{{ ai_gen_id }} {
    right: 10px;
  }

  @media screen and (max-width: 749px) {
    .ai-scroll-track-{{ ai_gen_id }} {
      display: block;
      transform: none !important;
    }

    .ai-scroll-item-{{ ai_gen_id }} {
      width: 100%;
      margin-bottom: 20px;
    }

    .ai-scroll-arrow-{{ ai_gen_id }} {
      display: none;
    }

    .ai-scroll-nav-{{ ai_gen_id }} {
      display: none;
    }
  }
{% endstyle %}

<responsive-scroll-{{ ai_gen_id }} class="ai-scroll-container-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-scroll-wrapper-{{ ai_gen_id }}">
    <div class="ai-scroll-track-{{ ai_gen_id }}">
      {% for i in (1..block.settings.content_count) %}
        {% assign title_key = 'title_' | append: i %}
        {% assign text_key = 'text_' | append: i %}
        {% assign image_key = 'image_' | append: i %}
        
        <div class="ai-scroll-item-{{ ai_gen_id }}">
          <div class="ai-scroll-item-content-{{ ai_gen_id }}">
            <div class="ai-scroll-item-image-{{ ai_gen_id }}">
              <div class="ai-scroll-item-image-container-{{ ai_gen_id }}">
                {% if block.settings[image_key] != blank %}
                  <img 
                    src="{{ block.settings[image_key] | image_url: width: 800 }}" 
                    alt="{{ block.settings[title_key] }}"
                    loading="lazy"
                    width="{{ block.settings[image_key].width }}"
                    height="{{ block.settings[image_key].height }}"
                  >
                {% else %}
                  <div class="ai-scroll-item-image-placeholder-{{ ai_gen_id }}">
                    {{ 'image' | placeholder_svg_tag }}
                  </div>
                {% endif %}
              </div>
            </div>
            <h3 class="ai-scroll-item-title-{{ ai_gen_id }}">{{ block.settings[title_key] }}</h3>
            <div class="ai-scroll-item-text-{{ ai_gen_id }}">{{ block.settings[text_key] }}</div>
          </div>
        </div>
      {% endfor %}
    </div>
    
    {% if block.settings.show_arrows %}
      <button class="ai-scroll-arrow-{{ ai_gen_id }} ai-scroll-prev-{{ ai_gen_id }}" aria-label="Previous">
        <svg viewBox="0 0 24 24">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      <button class="ai-scroll-arrow-{{ ai_gen_id }} ai-scroll-next-{{ ai_gen_id }}" aria-label="Next">
        <svg viewBox="0 0 24 24">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    {% endif %}
  </div>
  
  {% if block.settings.show_dots %}
    <div class="ai-scroll-nav-{{ ai_gen_id }}">
      {% for i in (1..block.settings.content_count) %}
        <div class="ai-scroll-dot-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}"></div>
      {% endfor %}
    </div>
  {% endif %}
</responsive-scroll-{{ ai_gen_id }}>

<script>
  (function() {
    class ResponsiveScroll{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('.ai-scroll-track-{{ ai_gen_id }}');
        this.items = this.querySelectorAll('.ai-scroll-item-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.ai-scroll-dot-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-scroll-prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-scroll-next-{{ ai_gen_id }}');
        this.itemsPerRow = {{ block.settings.items_per_row }};
        this.currentIndex = 0;
        this.itemCount = this.items.length;
        this.maxIndex = Math.ceil(this.itemCount / this.itemsPerRow) - 1;
        this.isMobile = window.innerWidth < 750;
        
        this.setupEventListeners();
        this.updateArrowVisibility();
      }
      
      connectedCallback() {
        if (this.isMobile) return;
        
        // Initialize touch events for mobile swipe
        this.touchStartX = 0;
        this.touchEndX = 0;
        
        this.track.addEventListener('touchstart', (e) => {
          this.touchStartX = e.changedTouches[0].screenX;
        }, { passive: true });
        
        this.track.addEventListener('touchend', (e) => {
          this.touchEndX = e.changedTouches[0].screenX;
          this.handleSwipe();
        }, { passive: true });
        
        // Handle resize events
        window.addEventListener('resize', this.handleResize.bind(this));
      }
      
      handleResize() {
        const wasMobile = this.isMobile;
        this.isMobile = window.innerWidth < 750;
        
        if (wasMobile !== this.isMobile) {
          // Reset position when switching between mobile and desktop
          this.goToSlide(0);
        }
      }
      
      handleSwipe() {
        if (this.isMobile) return;
        
        const swipeDistance = this.touchEndX - this.touchStartX;
        if (swipeDistance > 50) {
          this.goToPrevSlide();
        } else if (swipeDistance < -50) {
          this.goToNextSlide();
        }
      }
      
      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.goToPrevSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.goToNextSlide());
        }
        
        this.dots.forEach(dot => {
          dot.addEventListener('click', () => {
            const index = parseInt(dot.dataset.index);
            this.goToSlide(Math.floor(index / this.itemsPerRow));
          });
        });
      }
      
      goToPrevSlide() {
        if (this.currentIndex > 0) {
          this.goToSlide(this.currentIndex - 1);
        }
      }
      
      goToNextSlide() {
        if (this.currentIndex < this.maxIndex) {
          this.goToSlide(this.currentIndex + 1);
        }
      }
      
      goToSlide(index) {
        if (this.isMobile) return;
        
        this.currentIndex = index;
        const translateX = -index * 100 + '%';
        this.track.style.transform = `translateX(${translateX})`;
        
        // Update dots
        this.dots.forEach((dot, i) => {
          const dotIndex = Math.floor(i / this.itemsPerRow);
          dot.classList.toggle('active', dotIndex === index);
        });
        
        this.updateArrowVisibility();
      }
      
      updateArrowVisibility() {
        if (this.prevButton) {
          this.prevButton.style.opacity = this.currentIndex === 0 ? '0.5' : '1';
          this.prevButton.style.pointerEvents = this.currentIndex === 0 ? 'none' : 'auto';
        }
        
        if (this.nextButton) {
          this.nextButton.style.opacity = this.currentIndex === this.maxIndex ? '0.5' : '1';
          this.nextButton.style.pointerEvents = this.currentIndex === this.maxIndex ? 'none' : 'auto';
        }
      }
    }
    
    customElements.define('responsive-scroll-{{ ai_gen_id }}', ResponsiveScroll{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Responsive Scroll",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "range",
      "id": "content_count",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Number of items",
      "default": 5
    },
    {
      "type": "range",
      "id": "items_per_row",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Items per row (desktop)",
      "default": 3
    },
    {
      "type": "header",
      "content": "Item 1"
    },
    {
      "type": "text",
      "id": "title_1",
      "label": "Title",
      "default": "Item 1"
    },
    {
      "type": "textarea",
      "id": "text_1",
      "label": "Text",
      "default": "Description for item 1"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image"
    },
    {
      "type": "header",
      "content": "Item 2"
    },
    {
      "type": "text",
      "id": "title_2",
      "label": "Title",
      "default": "Item 2"
    },
    {
      "type": "textarea",
      "id": "text_2",
      "label": "Text",
      "default": "Description for item 2"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image"
    },
    {
      "type": "header",
      "content": "Item 3"
    },
    {
      "type": "text",
      "id": "title_3",
      "label": "Title",
      "default": "Item 3"
    },
    {
      "type": "textarea",
      "id": "text_3",
      "label": "Text",
      "default": "Description for item 3"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image"
    },
    {
      "type": "header",
      "content": "Item 4"
    },
    {
      "type": "text",
      "id": "title_4",
      "label": "Title",
      "default": "Item 4"
    },
    {
      "type": "textarea",
      "id": "text_4",
      "label": "Text",
      "default": "Description for item 4"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image"
    },
    {
      "type": "header",
      "content": "Item 5"
    },
    {
      "type": "text",
      "id": "title_5",
      "label": "Title",
      "default": "Item 5"
    },
    {
      "type": "textarea",
      "id": "text_5",
      "label": "Text",
      "default": "Description for item 5"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image"
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "item_background_color",
      "label": "Item background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#555555"
    },
    {
      "type": "color",
      "id": "arrow_color",
      "label": "Arrow color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "arrow_background_color",
      "label": "Arrow background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "arrow_hover_color",
      "label": "Arrow hover color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "item_spacing",
      "min": 5,
      "max": 30,
      "step": 5,
      "unit": "px",
      "label": "Item spacing",
      "default": 15
    },
    {
      "type": "range",
      "id": "item_padding",
      "min": 10,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Item padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "item_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Item border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 14,
      "max": 32,
      "step": 1,
      "unit": "px",
      "label": "Title font size",
      "default": 18
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Text font size",
      "default": 14
    }
  ],
  "presets": [
    {
      "name": "Responsive Scroll"
    }
  ]
}
{% endschema %}