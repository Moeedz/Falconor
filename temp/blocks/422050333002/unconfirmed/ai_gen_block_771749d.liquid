{% doc %}
  @prompt
    Create a responsive tab section for displaying products with different functionality for desktop and mobile. On desktop, show horizontal tabs with product grids that change when clicking different tabs. On mobile, use a different approach like accordion-style or swipeable cards for better touch interaction. Include customizable tab labels and the ability to select different product collections for each tab.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .product-tabs-{{ ai_gen_id }} {
    width: 100%;
    margin: 0 auto;
    padding: {{ block.settings.section_padding }}px 0;
  }

  .product-tabs-header-{{ ai_gen_id }} {
    display: flex;
    justify-content: {{ block.settings.tabs_alignment }};
    margin-bottom: 30px;
    border-bottom: 1px solid {{ block.settings.tab_border_color }};
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .product-tabs-header-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .product-tab-{{ ai_gen_id }} {
    padding: 12px 24px;
    font-size: {{ block.settings.tab_font_size }}px;
    background: transparent;
    border: none;
    border-bottom: 3px solid transparent;
    color: {{ block.settings.tab_text_color }};
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .product-tab-{{ ai_gen_id }}.active {
    color: {{ block.settings.tab_active_text_color }};
    border-bottom-color: {{ block.settings.tab_active_border_color }};
  }

  .product-tab-content-{{ ai_gen_id }} {
    display: none;
  }

  .product-tab-content-{{ ai_gen_id }}.active {
    display: block;
  }

  .product-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: 20px;
  }

  .product-card-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    background-color: {{ block.settings.card_background_color }};
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .product-card-image-container-{{ ai_gen_id }} {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
  }

  .product-card-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-card-info-{{ ai_gen_id }} {
    padding: 15px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .product-card-title-{{ ai_gen_id }} {
    font-size: 16px;
    font-weight: 500;
    margin: 0 0 8px;
    color: {{ block.settings.product_title_color }};
  }

  .product-card-price-{{ ai_gen_id }} {
    font-size: 15px;
    color: {{ block.settings.product_price_color }};
    margin-bottom: 12px;
  }

  .product-card-price-compare-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: {{ block.settings.product_compare_price_color }};
    margin-right: 5px;
  }

  .product-card-button-{{ ai_gen_id }} {
    margin-top: auto;
    padding: 8px 15px;
    background-color: {{ block.settings.button_background_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    transition: background-color 0.3s ease;
  }

  .product-card-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_background_color }};
  }

  /* Mobile Accordion Styles */
  .mobile-accordion-{{ ai_gen_id }} {
    display: none;
  }

  .mobile-accordion-item-{{ ai_gen_id }} {
    border-bottom: 1px solid {{ block.settings.tab_border_color }};
  }

  .mobile-accordion-header-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: {{ block.settings.mobile_accordion_background }};
    color: {{ block.settings.tab_text_color }};
    cursor: pointer;
    font-size: {{ block.settings.tab_font_size }}px;
    transition: background-color 0.3s ease;
  }

  .mobile-accordion-header-{{ ai_gen_id }}.active {
    color: {{ block.settings.tab_active_text_color }};
    background-color: {{ block.settings.mobile_accordion_active_background }};
  }

  .mobile-accordion-icon-{{ ai_gen_id }} {
    width: 20px;
    height: 20px;
    position: relative;
    transition: transform 0.3s ease;
  }

  .mobile-accordion-icon-{{ ai_gen_id }}::before,
  .mobile-accordion-icon-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    background-color: currentColor;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    transform: translateY(-50%);
  }

  .mobile-accordion-icon-{{ ai_gen_id }}::after {
    transform: translateY(-50%) rotate(90deg);
    transition: transform 0.3s ease;
  }

  .mobile-accordion-header-{{ ai_gen_id }}.active .mobile-accordion-icon-{{ ai_gen_id }}::after {
    transform: translateY(-50%) rotate(0);
  }

  .mobile-accordion-content-{{ ai_gen_id }} {
    display: none;
    padding: 15px;
  }

  .mobile-accordion-content-{{ ai_gen_id }}.active {
    display: block;
  }

  .mobile-product-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_mobile }}, 1fr);
    gap: 10px;
  }

  /* Mobile Swiper Styles */
  .mobile-swiper-{{ ai_gen_id }} {
    display: none;
    position: relative;
  }

  .mobile-swiper-tabs-{{ ai_gen_id }} {
    display: flex;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    margin-bottom: 15px;
    padding-bottom: 5px;
  }

  .mobile-swiper-tabs-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .mobile-swiper-tab-{{ ai_gen_id }} {
    padding: 8px 15px;
    background-color: transparent;
    border: 1px solid {{ block.settings.tab_border_color }};
    border-radius: 20px;
    margin-right: 10px;
    white-space: nowrap;
    color: {{ block.settings.tab_text_color }};
    transition: all 0.3s ease;
  }

  .mobile-swiper-tab-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.tab_active_border_color }};
    color: {{ block.settings.tab_active_text_color }};
  }

  .mobile-swiper-content-{{ ai_gen_id }} {
    display: none;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
    -webkit-overflow-scrolling: touch;
    padding-bottom: 20px;
  }

  .mobile-swiper-content-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .mobile-swiper-content-{{ ai_gen_id }}.active {
    display: flex;
  }

  .mobile-swiper-slide-{{ ai_gen_id }} {
    flex: 0 0 {{ 100 | divided_by: block.settings.columns_mobile }}%;
    max-width: {{ 100 | divided_by: block.settings.columns_mobile }}%;
    scroll-snap-align: start;
    padding: 0 5px;
  }

  .swiper-pagination-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 5px;
    margin-top: 15px;
  }

  .swiper-pagination-bullet-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: {{ block.settings.tab_border_color }};
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }

  .swiper-pagination-bullet-{{ ai_gen_id }}.active {
    opacity: 1;
    background-color: {{ block.settings.tab_active_border_color }};
  }

  /* Responsive Styles */
  @media screen and (max-width: 749px) {
    .product-tabs-header-{{ ai_gen_id }},
    .product-tab-content-{{ ai_gen_id }} {
      display: none;
    }

    {% if block.settings.mobile_layout == 'accordion' %}
      .mobile-accordion-{{ ai_gen_id }} {
        display: block;
      }
    {% else %}
      .mobile-swiper-{{ ai_gen_id }} {
        display: block;
      }
    {% endif %}
  }
{% endstyle %}

<div class="product-tabs-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <!-- Desktop Tabs -->
  <div class="product-tabs-header-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
      {% assign tab_title = block.settings[tab_title_key] %}
      
      {% if tab_title != blank %}
        <button 
          class="product-tab-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
          data-tab-index="{{ i }}"
        >
          {{ tab_title }}
        </button>
      {% endif %}
    {% endfor %}
  </div>

  <!-- Desktop Tab Content -->
  {% for i in (1..5) %}
    {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
    {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
    {% assign tab_limit_key = 'tab_' | append: i | append: '_limit' %}
    
    {% assign tab_title = block.settings[tab_title_key] %}
    {% assign tab_collection = block.settings[tab_collection_key] %}
    {% assign tab_limit = block.settings[tab_limit_key] %}
    
    {% if tab_title != blank and tab_collection != blank %}
      <div class="product-tab-content-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" data-tab-content="{{ i }}">
        <div class="product-grid-{{ ai_gen_id }}">
          {% for product in tab_collection.products limit: tab_limit %}
            <div class="product-card-{{ ai_gen_id }}">
              <div class="product-card-image-container-{{ ai_gen_id }}">
                {% if product.featured_image %}
                  <img 
                    src="{{ product.featured_image | image_url: width: 500 }}"
                    alt="{{ product.featured_image.alt | escape }}"
                    class="product-card-image-{{ ai_gen_id }}"
                    loading="lazy"
                    width="{{ product.featured_image.width }}"
                    height="{{ product.featured_image.height }}"
                  >
                {% else %}
                  <div class="product-card-image-container-{{ ai_gen_id }}">
                    {{ 'product-apparel-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}
              </div>
              <div class="product-card-info-{{ ai_gen_id }}">
                <h3 class="product-card-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                <div class="product-card-price-{{ ai_gen_id }}">
                  {% if product.compare_at_price > product.price %}
                    <span class="product-card-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                  {% endif %}
                  <span>{{ product.price | money }}</span>
                </div>
                <a href="{{ product.url }}" class="product-card-button-{{ ai_gen_id }}">
                  {{ block.settings.button_text }}
                </a>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
    {% endif %}
  {% endfor %}

  <!-- Mobile Accordion Layout -->
  <div class="mobile-accordion-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
      {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
      {% assign tab_limit_key = 'tab_' | append: i | append: '_limit' %}
      
      {% assign tab_title = block.settings[tab_title_key] %}
      {% assign tab_collection = block.settings[tab_collection_key] %}
      {% assign tab_limit = block.settings[tab_limit_key] %}
      
      {% if tab_title != blank and tab_collection != blank %}
        <div class="mobile-accordion-item-{{ ai_gen_id }}">
          <div 
            class="mobile-accordion-header-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
            data-accordion-index="{{ i }}"
          >
            <span>{{ tab_title }}</span>
            <div class="mobile-accordion-icon-{{ ai_gen_id }}"></div>
          </div>
          <div 
            class="mobile-accordion-content-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
            data-accordion-content="{{ i }}"
          >
            <div class="mobile-product-grid-{{ ai_gen_id }}">
              {% for product in tab_collection.products limit: tab_limit %}
                <div class="product-card-{{ ai_gen_id }}">
                  <div class="product-card-image-container-{{ ai_gen_id }}">
                    {% if product.featured_image %}
                      <img 
                        src="{{ product.featured_image | image_url: width: 300 }}"
                        alt="{{ product.featured_image.alt | escape }}"
                        class="product-card-image-{{ ai_gen_id }}"
                        loading="lazy"
                        width="{{ product.featured_image.width }}"
                        height="{{ product.featured_image.height }}"
                      >
                    {% else %}
                      <div class="product-card-image-container-{{ ai_gen_id }}">
                        {{ 'product-apparel-1' | placeholder_svg_tag }}
                      </div>
                    {% endif %}
                  </div>
                  <div class="product-card-info-{{ ai_gen_id }}">
                    <h3 class="product-card-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                    <div class="product-card-price-{{ ai_gen_id }}">
                      {% if product.compare_at_price > product.price %}
                        <span class="product-card-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                      {% endif %}
                      <span>{{ product.price | money }}</span>
                    </div>
                    <a href="{{ product.url }}" class="product-card-button-{{ ai_gen_id }}">
                      {{ block.settings.button_text }}
                    </a>
                  </div>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <!-- Mobile Swiper Layout -->
  <div class="mobile-swiper-{{ ai_gen_id }}">
    <div class="mobile-swiper-tabs-{{ ai_gen_id }}">
      {% for i in (1..5) %}
        {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
        {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
        {% assign tab_title = block.settings[tab_title_key] %}
        {% assign tab_collection = block.settings[tab_collection_key] %}
        
        {% if tab_title != blank and tab_collection != blank %}
          <button 
            class="mobile-swiper-tab-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
            data-swiper-tab="{{ i }}"
          >
            {{ tab_title }}
          </button>
        {% endif %}
      {% endfor %}
    </div>

    {% for i in (1..5) %}
      {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
      {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
      {% assign tab_limit_key = 'tab_' | append: i | append: '_limit' %}
      
      {% assign tab_title = block.settings[tab_title_key] %}
      {% assign tab_collection = block.settings[tab_collection_key] %}
      {% assign tab_limit = block.settings[tab_limit_key] %}
      
      {% if tab_title != blank and tab_collection != blank %}
        <div 
          class="mobile-swiper-content-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
          data-swiper-content="{{ i }}"
        >
          {% for product in tab_collection.products limit: tab_limit %}
            <div class="mobile-swiper-slide-{{ ai_gen_id }}">
              <div class="product-card-{{ ai_gen_id }}">
                <div class="product-card-image-container-{{ ai_gen_id }}">
                  {% if product.featured_image %}
                    <img 
                      src="{{ product.featured_image | image_url: width: 300 }}"
                      alt="{{ product.featured_image.alt | escape }}"
                      class="product-card-image-{{ ai_gen_id }}"
                      loading="lazy"
                      width="{{ product.featured_image.width }}"
                      height="{{ product.featured_image.height }}"
                    >
                  {% else %}
                    <div class="product-card-image-container-{{ ai_gen_id }}">
                      {{ 'product-apparel-1' | placeholder_svg_tag }}
                    </div>
                  {% endif %}
                </div>
                <div class="product-card-info-{{ ai_gen_id }}">
                  <h3 class="product-card-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                  <div class="product-card-price-{{ ai_gen_id }}">
                    {% if product.compare_at_price > product.price %}
                      <span class="product-card-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                    {% endif %}
                    <span>{{ product.price | money }}</span>
                  </div>
                  <a href="{{ product.url }}" class="product-card-button-{{ ai_gen_id }}">
                    {{ block.settings.button_text }}
                  </a>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<script>
  (function() {
    class ProductTabs extends HTMLElement {
      constructor() {
        super();
        this.desktopTabs = this.querySelectorAll('.product-tab-{{ ai_gen_id }}');
        this.desktopContents = this.querySelectorAll('.product-tab-content-{{ ai_gen_id }}');
        this.accordionHeaders = this.querySelectorAll('.mobile-accordion-header-{{ ai_gen_id }}');
        this.accordionContents = this.querySelectorAll('.mobile-accordion-content-{{ ai_gen_id }}');
        this.swiperTabs = this.querySelectorAll('.mobile-swiper-tab-{{ ai_gen_id }}');
        this.swiperContents = this.querySelectorAll('.mobile-swiper-content-{{ ai_gen_id }}');
        
        this.init();
      }
      
      init() {
        // Desktop tabs
        this.desktopTabs.forEach(tab => {
          tab.addEventListener('click', () => {
            const tabIndex = tab.getAttribute('data-tab-index');
            this.setActiveDesktopTab(tabIndex);
          });
        });
        
        // Mobile accordion
        this.accordionHeaders.forEach(header => {
          header.addEventListener('click', () => {
            const accordionIndex = header.getAttribute('data-accordion-index');
            this.toggleAccordion(accordionIndex);
          });
        });
        
        // Mobile swiper tabs
        this.swiperTabs.forEach(tab => {
          tab.addEventListener('click', () => {
            const swiperTabIndex = tab.getAttribute('data-swiper-tab');
            this.setActiveSwiperTab(swiperTabIndex);
          });
        });
        
        // Initialize swiper content scroll detection
        this.initializeSwiperScrollDetection();
      }
      
      setActiveDesktopTab(index) {
        this.desktopTabs.forEach(tab => {
          if (tab.getAttribute('data-tab-index') === index) {
            tab.classList.add('active');
          } else {
            tab.classList.remove('active');
          }
        });
        
        this.desktopContents.forEach(content => {
          if (content.getAttribute('data-tab-content') === index) {
            content.classList.add('active');
          } else {
            content.classList.remove('active');
          }
        });
      }
      
      toggleAccordion(index) {
        this.accordionHeaders.forEach(header => {
          const headerIndex = header.getAttribute('data-accordion-index');
          const isActive = header.classList.contains('active');
          
          if (headerIndex === index) {
            if (isActive) {
              header.classList.remove('active');
              this.accordionContents.forEach(content => {
                if (content.getAttribute('data-accordion-content') === index) {
                  content.classList.remove('active');
                }
              });
            } else {
              header.classList.add('active');
              this.accordionContents.forEach(content => {
                if (content.getAttribute('data-accordion-content') === index) {
                  content.classList.add('active');
                }
              });
            }
          } else {
            // Close other accordions if needed
            if ('{{ block.settings.accordion_behavior }}' === 'single') {
              header.classList.remove('active');
              this.accordionContents.forEach(content => {
                if (content.getAttribute('data-accordion-content') === headerIndex) {
                  content.classList.remove('active');
                }
              });
            }
          }
        });
      }
      
      setActiveSwiperTab(index) {
        this.swiperTabs.forEach(tab => {
          if (tab.getAttribute('data-swiper-tab') === index) {
            tab.classList.add('active');
          } else {
            tab.classList.remove('active');
          }
        });
        
        this.swiperContents.forEach(content => {
          if (content.getAttribute('data-swiper-content') === index) {
            content.classList.add('active');
          } else {
            content.classList.remove('active');
          }
        });
      }
      
      initializeSwiperScrollDetection() {
        this.swiperContents.forEach(content => {
          if (content.classList.contains('active')) {
            this.createPaginationForSwiper(content);
          }
        });
        
        // Update pagination when swiper tab changes
        this.swiperTabs.forEach(tab => {
          tab.addEventListener('click', () => {
            const index = tab.getAttribute('data-swiper-tab');
            this.swiperContents.forEach(content => {
              if (content.getAttribute('data-swiper-content') === index) {
                this.createPaginationForSwiper(content);
              }
            });
          });
        });
      }
      
      createPaginationForSwiper(swiperContent) {
        const slides = swiperContent.querySelectorAll('.mobile-swiper-slide-{{ ai_gen_id }}');
        if (!slides.length) return;
        
        // Remove existing pagination
        const existingPagination = this.querySelector('.swiper-pagination-{{ ai_gen_id }}');
        if (existingPagination) {
          existingPagination.remove();
        }
        
        // Create new pagination
        const pagination = document.createElement('div');
        pagination.className = 'swiper-pagination-{{ ai_gen_id }}';
        
        const slidesPerView = {{ block.settings.columns_mobile }};
        const totalPages = Math.ceil(slides.length / slidesPerView);
        
        for (let i = 0; i < totalPages; i++) {
          const bullet = document.createElement('span');
          bullet.className = 'swiper-pagination-bullet-{{ ai_gen_id }}';
          if (i === 0) bullet.classList.add('active');
          pagination.appendChild(bullet);
        }
        
        swiperContent.after(pagination);
        
        // Handle scroll events to update pagination
        swiperContent.addEventListener('scroll', () => {
          const scrollPosition = swiperContent.scrollLeft;
          const containerWidth = swiperContent.offsetWidth;
          const currentPage = Math.round(scrollPosition / containerWidth);
          
          const bullets = pagination.querySelectorAll('.swiper-pagination-bullet-{{ ai_gen_id }}');
          bullets.forEach((bullet, index) => {
            if (index === currentPage) {
              bullet.classList.add('active');
            } else {
              bullet.classList.remove('active');
            }
          });
        });
      }
    }
    
    customElements.define('product-tabs-{{ ai_gen_id }}', ProductTabs);
    
    // Initialize the component
    const productTabsElement = document.querySelector('.product-tabs-{{ ai_gen_id }}');
    if (productTabsElement && !productTabsElement.matches('product-tabs-{{ ai_gen_id }}')) {
      const newElement = document.createElement('product-tabs-{{ ai_gen_id }}');
      while (productTabsElement.firstChild) {
        newElement.appendChild(productTabsElement.firstChild);
      }
      productTabsElement.replaceWith(newElement);
    }
  })();
</script>

{% schema %}
{
  "name": "Product Tabs",
  "tag": null,
  "class": "product-tabs-section",
  "settings": [
    {
      "type": "header",
      "content": "Tab Content"
    },
    {
      "type": "text",
      "id": "tab_1_title",
      "label": "Tab 1 Title",
      "default": "Featured"
    },
    {
      "type": "collection",
      "id": "tab_1_collection",
      "label": "Tab 1 Collection"
    },
    {
      "type": "range",
      "id": "tab_1_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_2_title",
      "label": "Tab 2 Title",
      "default": "New Arrivals"
    },
    {
      "type": "collection",
      "id": "tab_2_collection",
      "label": "Tab 2 Collection"
    },
    {
      "type": "range",
      "id": "tab_2_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_3_title",
      "label": "Tab 3 Title",
      "default": "Best Sellers"
    },
    {
      "type": "collection",
      "id": "tab_3_collection",
      "label": "Tab 3 Collection"
    },
    {
      "type": "range",
      "id": "tab_3_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_4_title",
      "label": "Tab 4 Title"
    },
    {
      "type": "collection",
      "id": "tab_4_collection",
      "label": "Tab 4 Collection"
    },
    {
      "type": "range",
      "id": "tab_4_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_5_title",
      "label": "Tab 5 Title"
    },
    {
      "type": "collection",
      "id": "tab_5_collection",
      "label": "Tab 5 Collection"
    },
    {
      "type": "range",
      "id": "tab_5_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "tabs_alignment",
      "label": "Tabs alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "flex-end",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Desktop columns",
      "default": 4
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Mobile columns",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "mobile_layout",
      "label": "Mobile layout",
      "options": [
        {
          "value": "accordion",
          "label": "Accordion"
        },
        {
          "value": "swiper",
          "label": "Swipeable cards"
        }
      ],
      "default": "swiper"
    },
    {
      "type": "select",
      "id": "accordion_behavior",
      "label": "Accordion behavior",
      "options": [
        {
          "value": "single",
          "label": "Only one open at a time"
        },
        {
          "value": "multiple",
          "label": "Multiple can be open"
        }
      ],
      "default": "single"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 80,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Tab Styling"
    },
    {
      "type": "range",
      "id": "tab_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Tab font size",
      "default": 16
    },
    {
      "type": "color",
      "id": "tab_text_color",
      "label": "Tab text color",
      "default": "#777777"
    },
    {
      "type": "color",
      "id": "tab_active_text_color",
      "label": "Active tab text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "tab_border_color",
      "label": "Tab border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "tab_active_border_color",
      "label": "Active tab border color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "mobile_accordion_background",
      "label": "Mobile accordion background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "mobile_accordion_active_background",
      "label": "Active accordion background",
      "default": "#e8e8e8"
    },
    {
      "type": "header",
      "content": "Product Card Styling"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_price_color",
      "label": "Product price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_compare_price_color",
      "label": "Compare price color",
      "default": "#999999"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "View Product"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_background_color",
      "label": "Button hover background",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Product Tabs"
    }
  ]
}
{% endschema %}