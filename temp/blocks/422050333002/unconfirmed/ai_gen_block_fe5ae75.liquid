{% doc %}
  @prompt
    Create a responsive tab section for displaying products with different functionality for desktop and mobile. On desktop, show horizontal tabs with product grids that change when clicking different tabs. On mobile, use a different approach like accordion-style or swipeable cards for better touch interaction. Include customizable tab labels and the ability to select different product collections for each tab., it look great but the tab functionality is not working and also make a creative view in desktop and mobile view

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .product-tabs-{{ ai_gen_id }} {
    width: 100%;
    margin: 0 auto;
    padding: {{ block.settings.section_padding }}px 20px;
    background: linear-gradient(135deg, {{ block.settings.section_background_1 }} 0%, {{ block.settings.section_background_2 }} 100%);
    border-radius: {{ block.settings.section_border_radius }}px;
    position: relative;
    overflow: hidden;
  }

  .product-tabs-{{ ai_gen_id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
    pointer-events: none;
  }

  .product-tabs-header-{{ ai_gen_id }} {
    display: flex;
    justify-content: {{ block.settings.tabs_alignment }};
    margin-bottom: 40px;
    position: relative;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 50px;
    padding: 8px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .product-tabs-header-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .product-tab-{{ ai_gen_id }} {
    padding: 15px 30px;
    font-size: {{ block.settings.tab_font_size }}px;
    font-weight: 600;
    background: transparent;
    border: none;
    border-radius: 40px;
    color: {{ block.settings.tab_text_color }};
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    white-space: nowrap;
    position: relative;
    z-index: 2;
    text-transform: uppercase;
    letter-spacing: 0.5px;}

  .product-tab-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    color: {{ block.settings.tab_active_text_color }};}

  .product-tab-{{ ai_gen_id }}.active {
    background: linear-gradient(135deg, {{ block.settings.tab_active_background_1 }} 0%, {{ block.settings.tab_active_background_2 }} 100%);
    color: {{ block.settings.tab_active_text_color }};
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    transform: translateY(-3px);
  }

  .product-tab-content-{{ ai_gen_id }} {
    display: none;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .product-tab-content-{{ ai_gen_id }}.active {
    display: block;
    opacity: 1;
    transform: translateY(0);
  }

  .product-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: 30px;
    position: relative;
    z-index: 1;
  }

  .product-card-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    group: hover;
  }

  .product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
  }

  .product-card-image-container-{{ ai_gen_id }} {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
    background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
  }

  .product-card-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .product-card-{{ ai_gen_id }}:hover .product-card-image-{{ ai_gen_id }} {
    transform: scale(1.1);
  }

  .product-card-image-container-{{ ai_gen_id }} svg {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .product-card-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.3) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
  }

  .product-card-{{ ai_gen_id }}:hover .product-card-overlay-{{ ai_gen_id }} {
    opacity: 1;
  }

  .product-card-info-{{ ai_gen_id }} {
    padding: 25px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    background: linear-gradient(180deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.95) 100%);
  }

  .product-card-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 700;
    margin: 0 0 12px;
    color: {{ block.settings.product_title_color }};
    line-height: 1.3;
    transition: color 0.3s ease;
  }

  .product-card-{{ ai_gen_id }}:hover .product-card-title-{{ ai_gen_id }} {
    color: {{ block.settings.tab_active_background_1 }};
  }

  .product-card-price-{{ ai_gen_id }} {
    font-size: 16px;
    font-weight: 600;
    color: {{ block.settings.product_price_color }};
    margin-bottom: 20px;
  }

  .product-card-price-compare-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: {{ block.settings.product_compare_price_color }};
    margin-right: 8px;
    font-weight: 400;
  }

  .product-card-button-{{ ai_gen_id }} {
    margin-top: auto;
    padding: 12px 20px;
    background: linear-gradient(135deg, {{ block.settings.button_background_1 }} 0%, {{ block.settings.button_background_2 }} 100%);
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;}

  .product-card-button-{{ ai_gen_id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .product-card-button-{{ ai_gen_id }}:hover::before {
    left: 100%;
  }

  .product-card-button-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  /* Mobile Accordion Styles */
  .mobile-accordion-{{ ai_gen_id }} {
    display: none;
  }

  .mobile-accordion-item-{{ ai_gen_id }} {
    margin-bottom: 15px;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .mobile-accordion-header-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background: linear-gradient(135deg, {{ block.settings.mobile_accordion_background_1 }} 0%, {{ block.settings.mobile_accordion_background_2 }} 100%);
    color: {{ block.settings.tab_text_color }};
    cursor: pointer;
    font-size: {{ block.settings.tab_font_size }}px;
    font-weight: 600;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .mobile-accordion-header-{{ ai_gen_id }}.active {
    background: linear-gradient(135deg, {{ block.settings.tab_active_background_1 }} 0%, {{ block.settings.tab_active_background_2 }} 100%);
    color: {{ block.settings.tab_active_text_color }};
  }

  .mobile-accordion-icon-{{ ai_gen_id }} {
    width: 24px;
    height: 24px;
    position: relative;
    transition: transform 0.3s ease;
  }

  .mobile-accordion-icon-{{ ai_gen_id }}::before,
  .mobile-accordion-icon-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    background-color: currentColor;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    transform: translateY(-50%);
    border-radius: 2px;
  }

  .mobile-accordion-icon-{{ ai_gen_id }}::after {
    transform: translateY(-50%) rotate(90deg);
    transition: transform 0.3s ease;
  }

  .mobile-accordion-header-{{ ai_gen_id }}.active .mobile-accordion-icon-{{ ai_gen_id }}::after {
    transform: translateY(-50%) rotate(0);
  }

  .mobile-accordion-content-{{ ai_gen_id }} {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1);}

  .mobile-accordion-content-{{ ai_gen_id }}.active {
    max-height: 2000px;
  }

  .mobile-accordion-inner-{{ ai_gen_id }} {
    padding: 20px;
  }

  .mobile-product-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_mobile }}, 1fr);
    gap: 15px;
  }

  /* Mobile Swiper Styles */
  .mobile-swiper-{{ ai_gen_id }} {
    display: none;
    position: relative;
  }

  .mobile-swiper-tabs-{{ ai_gen_id }} {
    display: flex;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;margin-bottom: 20px;
    padding: 10px 0;gap: 10px;
  }

  .mobile-swiper-tabs-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .mobile-swiper-tab-{{ ai_gen_id }} {
    padding: 12px 20px;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    border: 2px solid {{ block.settings.tab_border_color }};
    border-radius: 25px;
    white-space: nowrap;
    color: {{ block.settings.tab_text_color }};
    font-weight: 600;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;cursor: pointer;}

  .mobile-swiper-tab-{{ ai_gen_id }}.active {
    background: linear-gradient(135deg, {{ block.settings.tab_active_background_1 }} 0%, {{ block.settings.tab_active_background_2 }} 100%);
    color: {{ block.settings.tab_active_text_color }};border-color: {{ block.settings.tab_active_background_1 }};transform: scale(1.05);
  }

  .mobile-swiper-content-{{ ai_gen_id }} {
    display: none;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
    -webkit-overflow-scrolling: touch;padding-bottom: 20px;
  }

  .mobile-swiper-content-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .mobile-swiper-content-{{ ai_gen_id }}.active {
    display: flex;
    gap: 15px;
  }

  .mobile-swiper-slide-{{ ai_gen_id }} {
    flex: 0 0 {{100 | divided_by: block.settings.columns_mobile | minus: 5 }}%;
    scroll-snap-align: start;
  }

  .swiper-pagination-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 20px;
  }

  .swiper-pagination-bullet-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: {{ block.settings.tab_border_color }};
    opacity: 0.5;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .swiper-pagination-bullet-{{ ai_gen_id }}.active {
    opacity: 1;
    background: linear-gradient(135deg, {{ block.settings.tab_active_background_1 }} 0%, {{ block.settings.tab_active_background_2 }} 100%);
    transform: scale(1.2);
  }

  /* Loading Animation */
  .loading-spinner-{{ ai_gen_id }} {
    display: none;
    justify-content: center;
    align-items: center;
    height: 200px;
  }

  .spinner-{{ ai_gen_id }} {
    width: 40px;
    height: 40px;
    border: 4px solid {{ block.settings.tab_border_color }};
    border-top: 4px solid {{ block.settings.tab_active_background_1 }};
    border-radius: 50%;
    animation: spin-{{ ai_gen_id }} 1s linear infinite;
  }

  @keyframes spin-{{ ai_gen_id }} {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Responsive Styles */
  @media screen and (max-width: 749px) {
    .product-tabs-header-{{ ai_gen_id }},
    .product-tab-content-{{ ai_gen_id }} {
      display: none;
    }

    .product-tabs-{{ ai_gen_id }} {
      padding: {{ block.settings.section_padding | divided_by: 2 }}px 15px;
    }

    {% if block.settings.mobile_layout == 'accordion' %}
      .mobile-accordion-{{ ai_gen_id }} {
        display: block;
      }
    {% else %}
      .mobile-swiper-{{ ai_gen_id }} {
        display: block;
      }
    {% endif %}

    .product-card-{{ ai_gen_id }} {
      transform: none;
    }

    .product-card-{{ ai_gen_id }}:hover {
      transform: translateY(-5px);
    }
  }

  @media screen and (max-width: 480px) {
    .mobile-swiper-slide-{{ ai_gen_id }} {
      flex: 0 0 {{ 100 | divided_by: block.settings.columns_mobile | minus: 2 }}%;
    }
  }
{% endstyle %}<product-tabs-{{ ai_gen_id }} class="product-tabs-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <!-- Desktop Tabs -->
  <div class="product-tabs-header-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
      {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
      {% assign tab_title = block.settings[tab_title_key] %}
      {% assign tab_collection = block.settings[tab_collection_key] %}
      
      {% if tab_title != blank and tab_collection != blank %}
        <button
          class="product-tab-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
          data-tab-index="{{ i }}">
          {{ tab_title }}
        </button>
      {% endif %}
    {% endfor %}
  </div>

  <!-- Loading Spinner -->
  <div class="loading-spinner-{{ ai_gen_id }}">
    <div class="spinner-{{ ai_gen_id }}"></div>
  </div>

  <!-- Desktop Tab Content -->
  {% for i in (1..5) %}
    {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
    {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
    {% assign tab_limit_key = 'tab_' | append: i | append: '_limit' %}
    
    {% assign tab_title = block.settings[tab_title_key] %}
    {% assign tab_collection = block.settings[tab_collection_key] %}
    {% assign tab_limit = block.settings[tab_limit_key] %}
    
    {% if tab_title != blank and tab_collection != blank %}
      <div class="product-tab-content-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" data-tab-content="{{ i }}">
        <div class="product-grid-{{ ai_gen_id }}">
          {% for product in tab_collection.products limit: tab_limit %}
            <div class="product-card-{{ ai_gen_id }}">
              <div class="product-card-image-container-{{ ai_gen_id }}">
                {% if product.featured_image %}
                  <img 
                    src="{{ product.featured_image | image_url: width: 500}}"
                    alt="{{ product.featured_image.alt | escape }}"
                    class="product-card-image-{{ ai_gen_id }}"
                    loading="lazy"width="{{ product.featured_image.width }}"
                    height="{{ product.featured_image.height }}"
                  >
                {% else %}
                  {{ 'product-apparel-1' | placeholder_svg_tag }}
                {% endif %}<div class="product-card-overlay-{{ ai_gen_id }}"></div>
              </div>
              <div class="product-card-info-{{ ai_gen_id }}">
                <h3 class="product-card-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                <div class="product-card-price-{{ ai_gen_id }}">
                  {% if product.compare_at_price > product.price %}
                    <span class="product-card-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                  {% endif %}
                  <span>{{ product.price | money }}</span>
                </div><a href="{{ product.url }}" class="product-card-button-{{ ai_gen_id }}">
                  {{ block.settings.button_text }}
                </a>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
    {% endif %}
  {% endfor %}

  <!-- Mobile Accordion Layout -->
  <div class="mobile-accordion-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
      {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
      {% assign tab_limit_key = 'tab_' | append: i | append: '_limit' %}
      
      {% assign tab_title = block.settings[tab_title_key] %}
      {% assign tab_collection = block.settings[tab_collection_key] %}
      {% assign tab_limit = block.settings[tab_limit_key] %}
      
      {% if tab_title != blank and tab_collection != blank %}
        <div class="mobile-accordion-item-{{ ai_gen_id }}">
          <div 
            class="mobile-accordion-header-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
            data-accordion-index="{{ i }}"
          >
            <span>{{ tab_title }}</span>
            <div class="mobile-accordion-icon-{{ ai_gen_id }}"></div>
          </div>
          <div 
            class="mobile-accordion-content-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
            data-accordion-content="{{ i }}"
          >
            <div class="mobile-accordion-inner-{{ ai_gen_id }}"><div class="mobile-product-grid-{{ ai_gen_id }}">
                {% for product in tab_collection.products limit: tab_limit %}
                  <div class="product-card-{{ ai_gen_id }}">
                    <div class="product-card-image-container-{{ ai_gen_id }}">
                      {% if product.featured_image %}
                        <img 
                          src="{{ product.featured_image | image_url: width: 300 }}"
                          alt="{{ product.featured_image.alt | escape }}"
                          class="product-card-image-{{ ai_gen_id }}"
                          loading="lazy"
                          width="{{ product.featured_image.width }}"
                          height="{{ product.featured_image.height }}"
                        >
                      {% else %}
                        {{ 'product-apparel-1' | placeholder_svg_tag }}
                      {% endif %}<div class="product-card-overlay-{{ ai_gen_id }}"></div>
                    </div>
                    <div class="product-card-info-{{ ai_gen_id }}">
                      <h3 class="product-card-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                      <div class="product-card-price-{{ ai_gen_id }}">
                        {% if product.compare_at_price > product.price %}
                          <span class="product-card-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                        {% endif %}
                        <span>{{ product.price | money }}</span>
                      </div>
                      <a href="{{ product.url }}" class="product-card-button-{{ ai_gen_id }}">
                        {{ block.settings.button_text }}
                      </a>
                    </div>
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <!-- Mobile Swiper Layout -->
  <div class="mobile-swiper-{{ ai_gen_id }}">
    <div class="mobile-swiper-tabs-{{ ai_gen_id }}">
      {% for i in (1..5) %}
        {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
        {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
        {% assign tab_title = block.settings[tab_title_key] %}
        {% assign tab_collection = block.settings[tab_collection_key] %}
        
        {% if tab_title != blank and tab_collection != blank %}
          <button 
            class="mobile-swiper-tab-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
            data-swiper-tab="{{ i }}"
          >
            {{ tab_title }}
          </button>
        {% endif %}
      {% endfor %}
    </div>

    {% for i in (1..5) %}
      {% assign tab_title_key = 'tab_' | append: i | append: '_title' %}
      {% assign tab_collection_key = 'tab_' | append: i | append: '_collection' %}
      {% assign tab_limit_key = 'tab_' | append: i | append: '_limit' %}
      
      {% assign tab_title = block.settings[tab_title_key] %}
      {% assign tab_collection = block.settings[tab_collection_key] %}
      {% assign tab_limit = block.settings[tab_limit_key] %}
      
      {% if tab_title != blank and tab_collection != blank %}
        <div 
          class="mobile-swiper-content-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" 
          data-swiper-content="{{ i }}"
        >
          {% for product in tab_collection.products limit: tab_limit %}
            <div class="mobile-swiper-slide-{{ ai_gen_id }}">
              <div class="product-card-{{ ai_gen_id }}">
                <div class="product-card-image-container-{{ ai_gen_id }}">
                  {% if product.featured_image %}
                    <img 
                      src="{{ product.featured_image | image_url: width: 300 }}"
                      alt="{{ product.featured_image.alt | escape }}"
                      class="product-card-image-{{ ai_gen_id }}"
                      loading="lazy"
                      width="{{ product.featured_image.width }}"
                      height="{{ product.featured_image.height }}"
                    >
                  {% else %}
                    {{ 'product-apparel-1' | placeholder_svg_tag }}
                  {% endif %}
                <div class="product-card-overlay-{{ ai_gen_id }}"></div>
                </div>
                <div class="product-card-info-{{ ai_gen_id }}">
                  <h3 class="product-card-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                  <div class="product-card-price-{{ ai_gen_id }}">
                    {% if product.compare_at_price > product.price %}
                      <span class="product-card-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                    {% endif %}
                    <span>{{ product.price | money }}</span>
                  </div>
                  <a href="{{ product.url }}" class="product-card-button-{{ ai_gen_id }}">
                    {{ block.settings.button_text }}
                  </a>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
      {% endif %}
    {% endfor %}<div class="swiper-pagination-{{ ai_gen_id }}"></div>
  </div>
</product-tabs-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductTabs{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.desktopTabs = this.querySelectorAll('.product-tab-{{ ai_gen_id }}');
        this.desktopContents = this.querySelectorAll('.product-tab-content-{{ ai_gen_id }}');
        this.accordionHeaders = this.querySelectorAll('.mobile-accordion-header-{{ ai_gen_id }}');
        this.accordionContents = this.querySelectorAll('.mobile-accordion-content-{{ ai_gen_id }}');
        this.swiperTabs = this.querySelectorAll('.mobile-swiper-tab-{{ ai_gen_id }}');
        this.swiperContents = this.querySelectorAll('.mobile-swiper-content-{{ ai_gen_id }}');
        this.loadingSpinner = this.querySelector('.loading-spinner-{{ ai_gen_id }}');
        this.currentActiveTab = 1;
      }
      
      connectedCallback() {
        this.init();
      }
      
      init() {
        this.setupDesktopTabs();
        this.setupMobileAccordion();
        this.setupMobileSwiper();
        this.initializeSwiperPagination();
      }
      
      setupDesktopTabs() {
        this.desktopTabs.forEach(tab => {
          tab.addEventListener('click', (e) => {
            e.preventDefault();
            const tabIndex = parseInt(tab.getAttribute('data-tab-index'));
            this.setActiveDesktopTab(tabIndex);
          });
        });
      }
      
      setupMobileAccordion() {
        this.accordionHeaders.forEach(header => {
          header.addEventListener('click', (e) => {
            e.preventDefault();
            const accordionIndex = parseInt(header.getAttribute('data-accordion-index'));
            this.toggleAccordion(accordionIndex);
          });
        });
      }
      
      setupMobileSwiper() {
        this.swiperTabs.forEach(tab => {
          tab.addEventListener('click', (e) => {
            e.preventDefault();
            const swiperTabIndex = parseInt(tab.getAttribute('data-swiper-tab'));
            this.setActiveSwiperTab(swiperTabIndex);
          });
        });
      }
      
      setActiveDesktopTab(index) {
        this.showLoading();
        
        setTimeout(() => {
          this.desktopTabs.forEach(tab => {
            const tabIndex = parseInt(tab.getAttribute('data-tab-index'));
            if (tabIndex === index) {
              tab.classList.add('active');} else {
              tab.classList.remove('active');
            }
          });
          
          this.desktopContents.forEach(content => {
            const contentIndex = parseInt(content.getAttribute('data-tab-content'));
            if (contentIndex === index) {
              content.classList.add('active');
            } else {
              content.classList.remove('active');
            }
          });
          
          this.hideLoading();
          this.currentActiveTab = index;
        }, 300);
      }
      
      toggleAccordion(index) {
        const targetHeader = this.querySelector(`[data-accordion-index="${index}"]`);
        const targetContent = this.querySelector(`[data-accordion-content="${index}"]`);
        
        if (!targetHeader || !targetContent) return;
        
        const isActive = targetHeader.classList.contains('active');
        
        if ('{{ block.settings.accordion_behavior }}' === 'single') {
          this.accordionHeaders.forEach(header => {
            header.classList.remove('active');
          });
          this.accordionContents.forEach(content => {
            content.classList.remove('active');
          });
        }
        
        if (!isActive) {
          targetHeader.classList.add('active');
          targetContent.classList.add('active');
        } else if ('{{ block.settings.accordion_behavior }}' === 'multiple') {
          targetHeader.classList.remove('active');
          targetContent.classList.remove('active');
        }
      }
      
      setActiveSwiperTab(index) {
        this.swiperTabs.forEach(tab => {
          const tabIndex = parseInt(tab.getAttribute('data-swiper-tab'));
          if (tabIndex === index) {
            tab.classList.add('active');
          } else {
            tab.classList.remove('active');
          }
        });
        this.swiperContents.forEach(content => {
          const contentIndex = parseInt(content.getAttribute('data-swiper-content'));
          if (contentIndex === index) {
            content.classList.add('active');
          } else {
            content.classList.remove('active');
          }
        });
        this.updateSwiperPagination();
      }
      
      initializeSwiperPagination() {
        this.swiperContents.forEach(content => {
          this.setupSwiperScrollDetection(content);
        });
        this.updateSwiperPagination();
      }
      
      setupSwiperScrollDetection(swiperContent) {
        if (!swiperContent) return;
        
        swiperContent.addEventListener('scroll', () => {
          this.updatePaginationOnScroll(swiperContent);
        });
      }
      
      updateSwiperPagination() {
        const activeSwiper = this.querySelector('.mobile-swiper-content-{{ ai_gen_id }}.active');
        const paginationContainer = this.querySelector('.swiper-pagination-{{ ai_gen_id }}');
        
        if (!activeSwiper || !paginationContainer) return;
        
        const slides = activeSwiper.querySelectorAll('.mobile-swiper-slide-{{ ai_gen_id }}');
        const slidesPerView = {{ block.settings.columns_mobile }};
        const totalPages = Math.ceil(slides.length / slidesPerView);
        
        paginationContainer.innerHTML = '';
        
        for (let i = 0; i < totalPages; i++) {
          const bullet = document.createElement('span');
          bullet.className = 'swiper-pagination-bullet-{{ ai_gen_id }}';
          if (i === 0) bullet.classList.add('active');
          
          bullet.addEventListener('click', () => {
            const slideWidth = slides[0].offsetWidth + 15;
            const scrollPosition = i * slideWidth * slidesPerView;
            activeSwiper.scrollTo({
              left: scrollPosition,
              behavior: 'smooth'
            });
          });
          
          paginationContainer.appendChild(bullet);
        }
      }
      
      updatePaginationOnScroll(swiperContent) {
        const paginationContainer = this.querySelector('.swiper-pagination-{{ ai_gen_id }}');
        if (!paginationContainer) return;
        
        const slides = swiperContent.querySelectorAll('.mobile-swiper-slide-{{ ai_gen_id }}');
        const slidesPerView = {{ block.settings.columns_mobile }};
        const slideWidth = slides[0] ? slides[0].offsetWidth + 15 : 0;
        const scrollPosition = swiperContent.scrollLeft;
        const currentPage = Math.round(scrollPosition / (slideWidth * slidesPerView));
        
        const bullets = paginationContainer.querySelectorAll('.swiper-pagination-bullet-{{ ai_gen_id }}');
        bullets.forEach((bullet, index) => {
          if (index === currentPage) {
            bullet.classList.add('active');
          } else {
            bullet.classList.remove('active');
          }
        });
      }
      
      showLoading() {
        if (this.loadingSpinner) {
          this.loadingSpinner.style.display = 'flex';
        }this.desktopContents.forEach(content => {
          content.style.opacity = '0.5';
        });
      }
      
      hideLoading() {
        if (this.loadingSpinner) {
          this.loadingSpinner.style.display = 'none';
        }
        this.desktopContents.forEach(content => {
          content.style.opacity = '1';
        });
      }
    }
    
    customElements.define('product-tabs-{{ ai_gen_id }}', ProductTabs{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product Tabs",
  "tag": null,
  "class": "product-tabs-section",
  "settings": [
    {
      "type": "header",
      "content": "Tab Content"
    },
    {
      "type": "text",
      "id": "tab_1_title",
      "label": "Tab 1 Title",
      "default": "Featured"
    },
    {
      "type": "collection",
      "id": "tab_1_collection",
      "label": "Tab 1 Collection"
    },
    {
      "type": "range",
      "id": "tab_1_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_2_title",
      "label": "Tab 2 Title",
      "default": "New Arrivals"
    },
    {
      "type": "collection",
      "id": "tab_2_collection",
      "label": "Tab 2 Collection"
    },
    {
      "type": "range",
      "id": "tab_2_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_3_title",
      "label": "Tab 3 Title",
      "default": "Best Sellers"
    },
    {
      "type": "collection",
      "id": "tab_3_collection",
      "label": "Tab 3 Collection"
    },
    {
      "type": "range",
      "id": "tab_3_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_4_title",
      "label": "Tab 4 Title"
    },
    {
      "type": "collection",
      "id": "tab_4_collection",
      "label": "Tab 4 Collection"
    },
    {
      "type": "range",
      "id": "tab_4_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "text",
      "id": "tab_5_title",
      "label": "Tab 5 Title"
    },
    {
      "type": "collection",
      "id": "tab_5_collection",
      "label": "Tab 5 Collection"
    },
    {
      "type": "range",
      "id": "tab_5_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "tabs_alignment",
      "label": "Tabs alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "flex-end",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Desktop columns",
      "default": 4
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Mobile columns",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "mobile_layout",
      "label": "Mobile layout",
      "options": [
        {
          "value": "accordion",
          "label": "Accordion"
        },
        {
          "value": "swiper",
          "label": "Swipeable cards"
        }
      ],
      "default": "swiper"
    },
    {
      "type": "select",
      "id": "accordion_behavior",
      "label": "Accordion behavior",
      "options": [
        {
          "value": "single",
          "label": "Only one open at a time"
        },
        {
          "value": "multiple",
          "label": "Multiple can be open"
        }
      ],
      "default": "single"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 50
    },
    {
      "type": "range",
      "id": "section_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Section border radius",
      "default": 20
    },
    {
      "type": "header",
      "content": "Section Colors"
    },
    {
      "type": "color",
      "id": "section_background_1",
      "label": "Background gradient start",
      "default": "#667eea"
    },
    {
      "type": "color",
      "id": "section_background_2",
      "label": "Background gradient end",
      "default": "#764ba2"
    },
    {
      "type": "header",
      "content": "Tab Styling"
    },
    {
      "type": "range",
      "id": "tab_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Tab font size",
      "default": 16
    },
    {
      "type": "color",
      "id": "tab_text_color",
      "label": "Tab text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "tab_active_text_color",
      "label": "Active tab text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "tab_border_color",
      "label": "Tab border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "tab_active_background_1",
      "label": "Active tab background start",
      "default": "#ff6b6b"
    },
    {
      "type": "color",
      "id": "tab_active_background_2",
      "label": "Active tab background end",
      "default": "#ee5a24"
    },
    {
      "type": "color",
      "id": "mobile_accordion_background_1",
      "label": "Mobile accordion background start",
      "default": "#f8f9fa"
    },
    {
      "type": "color",
      "id": "mobile_accordion_background_2",
      "label": "Mobile accordion background end",
      "default": "#e9ecef"
    },
    {
      "type": "header",
      "content": "Product Card Styling"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 25,
      "step": 1,
      "unit": "px",
      "label": "Card border radius",
      "default": 15
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product title color",
      "default": "#2c3e50"
    },
    {
      "type": "color",
      "id": "product_price_color",
      "label": "Product price color",
      "default": "#27ae60"
    },
    {
      "type": "color",
      "id": "product_compare_price_color",
      "label": "Compare price color",
      "default": "#95a5a6"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "View Product"
    },
    {
      "type": "color",
      "id": "button_background_1",
      "label": "Button background start",
      "default": "#3742fa"
    },
    {
      "type": "color",
      "id": "button_background_2",
      "label": "Button background end",
      "default": "#2f3542"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 25,
      "step": 1,
      "unit": "px",
      "label": "Button border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Product Tabs"
    }
  ]
}
{% endschema %}